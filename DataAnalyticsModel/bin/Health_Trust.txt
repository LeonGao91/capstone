function [HEALTH,TRUST]=Health_trust_score
% 5x5 Feature Extract
HEALTH=0;
TRUST=0;
T1=6;
T2=6;
T1H=10;
T2H=10;
T1R=.5;  % Repeatability NOISE THRESH V
T2R=.5;
outlier_alg.thresh_simple=4;
win_outlier_alg.thresh_simple=8;


NLanes=8;
% Fake Data 5 parts  x 5 repeats  x 8lanes
% Normally would read this in.
WrV_up=randn(NLanes,5,5)*2+12;
WrV_dn=randn(NLanes,5,5)*2+12;
WrT_up=randn(NLanes,5,5)*2+12;
WrT_dn=randn(NLanes,5,5)*2+12;

% Fake Simulation Data  Normally, would be a specific record/part
Sim.WrV_up=randn(8,1,1)*2+12;
Sim.WrV_dn=randn(8,1,1)*2+12;
Sim.WrT_up=randn(8,1,1)*2+12;
Sim.WrT_dn=randn(8,1,1)*2+12;

% Intel Averages
Intel.WrV_up=ones(8,1,1)*11;
Intel.WrV_dn=ones(8,1,1)*11;
Intel.WrT_up=ones(8,1,1)*11;
Intel.WrT_dn=ones(8,1,1)*11;

% Ideas
% Fuzzy 
% Create Demo to test algo


% CLEAN DATA
% Look for all zeros
% Look for all pegged
% Eventually look for Bus Speed, other meta data in specified ranges



%  System Level Features


WrV_up_sys=System_Features(WrV_up,outlier_alg);  
WrV_dn_sys=System_Features(WrV_dn,outlier_alg);
WrT_up_sys=System_Features(WrT_up,outlier_alg);
WrT_dn_sys=System_Features(WrT_dn,outlier_alg);


WrV_win_sys=System_Features(WrV_up+WrV_dn,win_outlier_alg);  
WrT_win_sys=System_Features(WrT_up+WrT_dn,win_outlier_alg);


[all_outliers,dummy,all_outliers_loc]=unique([WrV_dn_sys.outliers; WrV_up_sys.outliers; WrT_dn_sys.outliers; WrT_up_sys.outliers]);
outlier_hist=hist(all_outliers_loc,1:length(all_outliers));  % How many Margin directions show the same outlier

% 
WrV_up_sys.all.result_min=Calc_mean(WrV_up_sys.all.margin_min);     
WrV_up_sys.all.result_mean=Calc_mean(WrV_up_sys.all.margin_mean);    
WrV_dn_sys.all.result_min=Calc_mean(WrV_dn_sys.all.margin_min);     
WrV_dn_sys.all.result_mean=Calc_mean(WrV_dn_sys.all.margin_mean);     
WrT_up_sys.all.result_min=Calc_mean(WrT_up_sys.all.margin_min);     
WrT_up_sys.all.result_mean=Calc_mean(WrT_up_sys.all.margin_mean);     
WrT_dn_sys.all.result_min=Calc_mean(WrT_dn_sys.all.margin_min);     
WrT_dn_sys.all.result_mean=Calc_mean(WrT_dn_sys.all.margin_mean);     

WrV_win_sys.all.result_min=Calc_mean(WrV_win_sys.all.margin_min);
WrV_win_sys.all.result_mean=Calc_mean(WrV_win_sys.all.margin_mean);
WrT_win_sys.all.result_min=Calc_mean(WrT_win_sys.all.margin_min);
WrT_win_sys.all.result_mean=Calc_mean(WrT_win_sys.all.margin_mean);


WrV_up_sys.out.result_min=Calc_mean(WrV_up_sys.out.margin_min);     
WrV_dn_sys.out.result_min=Calc_mean(WrV_dn_sys.out.margin_min);     
WrT_up_sys.out.result_min=Calc_mean(WrT_up_sys.out.margin_min);     
WrT_dn_sys.out.result_min=Calc_mean(WrT_dn_sys.out.margin_min);   

WrV_up_sys.out.result_mean=Calc_mean(WrV_up_sys.out.margin_mean);     
WrV_dn_sys.out.result_mean=Calc_mean(WrV_dn_sys.out.margin_mean);     
WrT_up_sys.out.result_mean=Calc_mean(WrT_up_sys.out.margin_mean);     
WrT_dn_sys.out.result_mean=Calc_mean(WrT_dn_sys.out.margin_mean);     

WrV_win_sys.out.result_min=Calc_mean(WrV_win_sys.out.margin_min);     
WrT_win_sys.out.result_min=Calc_mean(WrT_win_sys.out.margin_min);     

% Find WC Lane


% First include Sim data
    
byLane=sum(sign(Sim.WrV_up-Intel.WrV_up)+sign(Sim.WrV_dn-Intel.WrV_dn)+sign(Sim.WrT_up-Intel.WrT_up)+sign(Sim.WrT_dn-Intel.WrT_dn));
system=min(Sim.WrV_up)>min(Intel.WrV_up) & min(Sim.WrV_dn)>min(Intel.WrV_dn) & min(Sim.WrT_up)>min(Intel.WrT_up)&min(Sim.WrT_dn)> min(Intel.WrT_dn);
really_bad=min(Sim.WrV_up)<.75*min(Intel.WrV_up) | min(Sim.WrV_dn)<.75*min(Intel.WrV_dn) | min(Sim.WrT_up)<.75*min(Intel.WrT_up) | min(Sim.WrT_dn)<.75* min(Intel.WrT_dn);
    TRUST=10;

HEALTH=5*byLane/(4*size(Sim.WrV_up,1))+5*system-5*really_bad;
% check for bad data in Sim.

if any([Sim.WrV_up; Sim.WrV_dn; Sim.WrT_up; Sim.WrT_dn]<=0)
    HEALTH=0;
    TRUST=0;
end




basic_mean_check=(WrV_up_sys.all.result_min.sample_mean>T1 & WrV_dn_sys.all.result_min.sample_mean>T1 & WrT_up_sys.all.result_min.sample_mean>T2 & WrT_dn_sys.all.result_min.sample_mean>T2);
outlier_mean_check=(WrV_up_sys.out.result_min.sample_mean>T1 & WrV_dn_sys.out.result_min.sample_mean>T1 & WrT_up_sys.out.result_min.sample_mean>T2 & WrT_dn_sys.out.result_min.sample_mean>T2);

basic_min_check=(WrV_up_sys.all.result_min.min>T1 & WrV_dn_sys.all.result_min.min>T1 & WrT_up_sys.all.result_min.min>T2 & WrT_dn_sys.all.result_min.min>T2);
outlier_min_check=(WrV_up_sys.out.result_min.min>T1 & WrV_dn_sys.out.result_min.min>T1 & WrT_up_sys.out.result_min.min>T2 & WrT_dn_sys.out.result_min.min>T2);


% MEAN CHECK 1
HEALTH=HEALTH+20*(basic_mean_check | outlier_mean_check);

if outlier_mean_check==basic_mean_check
    TRUST=TRUST+5;
end    
% MEAN CHECK 2 ( High Thresh)
HEALTH=HEALTH+5*(WrV_up_sys.all.result_min.sample_mean>T1H & WrV_dn_sys.all.result_min.sample_mean>T1H & WrT_up_sys.all.result_min.sample_mean>T2H & WrT_dn_sys.all.result_min.sample_mean>T2H);

% MIN CHECK 1
HEALTH=HEALTH+20*(basic_min_check|outlier_min_check);

if outlier_min_check==basic_min_check
    TRUST=TRUST+5;
end
% MIN CHECK 2 (High Thresh)

HEALTH=HEALTH+5*(WrV_up_sys.all.result_min.min>T1H & WrV_dn_sys.all.result_min.min>T1H & WrT_up_sys.all.result_min.min>T2H & WrT_dn_sys.all.result_min.min>T2H);


% SIGMA CHECK (MEAN)
basic_sigma_check=(WrV_up_sys.all.result_mean.total_sigma<2 & WrV_dn_sys.all.result_mean.total_sigma<2 & WrT_up_sys.all.result_mean.total_sigma<2 & WrT_dn_sys.all.result_mean.total_sigma<2);
outlier_sigma_check=(WrV_up_sys.out.result_mean.total_sigma<2 & WrV_dn_sys.out.result_mean.total_sigma<2 & WrT_up_sys.out.result_mean.total_sigma<2 & WrT_dn_sys.out.result_mean.total_sigma<2);
HEALTH=HEALTH+5*(basic_sigma_check|outlier_sigma_check);
if outlier_sigma_check==basic_sigma_check
    TRUST=TRUST+5;
end    


% SIGMA CHECK  (MIN)
basic_sigma_check=(WrV_up_sys.all.result_min.total_sigma<2 & WrV_dn_sys.all.result_min.total_sigma<2 & WrT_up_sys.all.result_min.total_sigma<2 & WrT_dn_sys.all.result_min.total_sigma<2);
outlier_sigma_check=(WrV_up_sys.out.result_min.total_sigma<2 & WrV_dn_sys.out.result_min.total_sigma<2 & WrT_up_sys.out.result_min.total_sigma<2 & WrT_dn_sys.out.result_min.total_sigma<2);
HEALTH=HEALTH+5*(basic_sigma_check|outlier_sigma_check);
if outlier_sigma_check==basic_sigma_check
    TRUST=TRUST+5;
end    

% SIGMA CHECK2
sigma_check2=(WrV_up_sys.out.result_min.total_sigma<.2 & WrV_dn_sys.out.result_min.total_sigma<.2 & WrT_up_sys.out.result_min.total_sigma<.2 & WrT_dn_sys.out.result_min.total_sigma<.2);
TRUST=TRUST-2*sigma_check2;


% MEAN CHECK 3 ( High Thresh)
HEALTH=HEALTH+5*(WrV_up_sys.out.result_mean.sample_mean>T1H & WrV_dn_sys.out.result_mean.sample_mean>T1H & WrT_up_sys.out.result_mean.sample_mean>T2H & WrT_dn_sys.out.result_mean.sample_mean>T2H);
% MEAN CHECK 4 ( High Thresh)
HEALTH=HEALTH+5*(WrV_up_sys.out.result_mean.min>T1H & WrV_dn_sys.out.result_mean.min>T1H & WrT_up_sys.out.result_mean.min>T2H & WrT_dn_sys.out.result_mean.min>T2H);

% OUTLIER COUNT
HEALTH=HEALTH-length(all_outliers);  % maybe put a limit % especially if someone does >5 repeats
TRUST=TRUST-length(all_outliers);  % maybe put a limit
% maybe add in some trust score for single margin direction vs multi margin
% direction outlier


% WINDOW
basic_mean_check=(WrV_win_sys.all.result_min.sample_mean>2*T1  & WrT_win_sys.all.result_min.sample_mean>2*T2 );
outlier_mean_check=(WrV_win_sys.out.result_min.sample_mean>2*T1  & WrT_win_sys.out.result_min.sample_mean>2*T2 );
% MEAN CHECK 1
HEALTH=HEALTH+5*(basic_mean_check | outlier_mean_check);

% Repeatability noise
HEALTH=HEALTH+5*(WrV_up_sys.out.repeat_noise1>T1R & WrV_dn_sys.out.repeat_noise1>T1R & WrT_up_sys.out.repeat_noise1>T2R & WrT_dn_sys.out.repeat_noise1>T2R);

WrV_UD_corr=corr(WrV_up_sys.all.margin_mean,WrV_dn_sys.all.margin_mean);
WrT_UD_corr=corr(WrT_up_sys.all.margin_mean,WrT_dn_sys.all.margin_mean);
WrVT_win_corr=corr(WrV_win_sys.all.margin_mean,WrT_win_sys.all.margin_mean);

% if <-.8 then indicates push-pull probably should drop health
if WrV_UD_corr>.8 
    HEALTH=HEALTH+1.5;
    TRUST=TRUST+2.5;
end
if WrT_UD_corr>.8 
    HEALTH=HEALTH+1.5;
    TRUST=TRUST+2.5;
end
if WrVT_win_corr>.8 
    HEALTH=HEALTH+3;
    TRUST=TRUST+5;
end


NLanes_WC=max([WrV_up_sys.N_wc_lane WrV_dn_sys.N_wc_lane WrT_up_sys.N_wc_lane WrT_dn_sys.N_wc_lane])-1;
HEALTH=HEALTH-NLanes_WC;  % may want to limit to 8 
Lane2LaneCorr1=mean(max(WrV_dn_sys.Lane2Lane-eye(NLanes,NLanes)));
Lane2LaneCorr2=mean(max(WrV_up_sys.Lane2Lane-eye(NLanes,NLanes)));
Lane2LaneCorr3=mean(max(WrT_up_sys.Lane2Lane-eye(NLanes,NLanes)));
Lane2LaneCorr4=mean(max(WrT_dn_sys.Lane2Lane-eye(NLanes,NLanes)));
if Lane2LaneCorr1>.8 & Lane2LaneCorr2>.8
    HEALTH=HEALTH+1.5;
    TRUST=TRUST+2.5;
end
if Lane2LaneCorr3>.8 & Lane2LaneCorr4>.8
    HEALTH=HEALTH+1.5;
    TRUST=TRUST+2.5;
end

disp([HEALTH TRUST])

function db=System_Features(data_in,outlier_alg)

% Take Min over lanes
% Take Mean over lanes
% Remove outlier points (could be system or repeat)
%     Redo Analysis
% Repeat Noise Est
% Include Error Bar (Sample Size) in mean est.

db.all=basic_stats(data_in);

% rudimentary outlier detector ( update to model based)
% range check etc.
outliers=find(abs((db.all.margin_min-db.all.margin_mean))>outlier_alg.thresh_simple);  % Threshold 
db.outliers=outliers;
data_in2=data_in;
data_in2(:,outliers)=NaN;        % handle better in real implementation
db.out=basic_stats(data_in2);  % only min numbers will be good

bylane=nanmean(nanmean(data_in2,2),3);
[wc_lane_val,wc_lane]=nanmin(bylane);
db.N_wc_lane=length(find((bylane-wc_lane_val)<.5));
data_in3=data_in2(wc_lane,:,:);
db.wc_lane=basic_stats(data_in3);
db.Lane2Lane=corrcoef(nanmean(data_in2,3)');


function db=basic_stats(data_in)

  

di_min=min(data_in,[],1);
di_mean=nanmean(data_in,1);
di_max=max(data_in,[],1);
di_sigma=nanstd(data_in,1);
total_sigma1=nanstd(di_min(:));
total_sigma2=nanstd(di_mean(:));
p2p_sigma1=nanstd(nanmean(di_min,3));
p2p_sigma2=nanstd(nanmean(di_mean,3));
noise1=nanmean(nanstd(di_min));
noise2=nanmean(nanstd(di_mean));



db.margin_min=di_min(:);
db.margin_mean=di_mean(:);
db.repeat_noise1=noise1;
db.repeat_noise2=noise2;
db.p2p_noise1=p2p_sigma1;
db.p2p_noise2=p2p_sigma2;





function db=Calc_mean(data_in)
db.sample_mean=nanmean(data_in(:));
db.mpme_mean=nanmean(data_in(:));
db.median=nanmedian(data_in(:));
db.total_sigma=nanstd(data_in(:));
db.min=min(data_in(:));
db.max=max(data_in(:));






function db=Lane_Features(data_in)
